class
id -- Main
{
static
int
id -- A32
=
lit_int -- 5
,
id -- _c
=
lit_int -- 25
,
id -- $d
=
lit_int -- 52
;
static
double
id -- b_25
=
lit_int -- 6
/
(
lit_int -- 5
*
lit_int -- 3
)
+
lit_int -- 2
*
full_id -- Main._c
;
static
String
id -- string
=
chain -- ahoj
;
static
void
id -- run
(
)
{
int
id -- A32
=
lit_int -- 6
;
full_id -- ifj16.print
(
chain -- Plne kvalifikovane Main.A32: 
)
;
full_id -- ifj16.print
(
full_id -- Main.A32
)
;
full_id -- ifj16.print
(
chain -- 
Lokalni A32: 
)
;
full_id -- ifj16.print
(
id -- A32
)
;
double
id -- k
=
lit_double -- 25.500E-2
;
full_id -- ifj16.print
(
chain -- 


)
;
full_id -- ifj16.print
(
id -- k
)
;
id -- k
=
lit_double -- 25.500e+2
;
full_id -- ifj16.print
(
chain -- 


)
;
full_id -- ifj16.print
(
id -- k
)
;
id -- k
=
lit_double -- 25.500e2
;
full_id -- ifj16.print
(
chain -- 


)
;
full_id -- ifj16.print
(
id -- k
)
;
String
id -- retezec
=
chain -- Ahoj
	Sve'te\\"&
Toto je delsi radek
;
full_id -- ifj16.print
(
chain -- 


)
;
full_id -- ifj16.print
(
id -- k
)
;
id -- k
=
full_id -- Main.b_25
*
full_id -- Main.$d52
+
id -- A32
;
full_id -- ifj16.print
(
chain -- 


)
;
full_id -- ifj16.print
(
id -- k
)
;
id -- k
=
full_id -- Main.b_25
*
(
full_id -- Main.$d52
-
id -- A32
)
;
full_id -- ifj16.print
(
chain -- 


)
;
full_id -- ifj16.print
(
id -- k
)
;
id -- k
=
(
full_id -- Main.b_25
*
full_id -- Main.$d52
)
*
id -- A32
;
full_id -- ifj16.print
(
chain -- 


)
;
full_id -- ifj16.print
(
id -- k
)
;
id -- k
=
full_id -- Main.b_25
/
full_id -- Main.$d52
*
id -- A32
;
full_id -- ifj16.print
(
chain -- 


)
;
full_id -- ifj16.print
(
id -- k
)
;
id -- k
=
full_id -- Main.b_25
-
full_id -- Main.$d52
+
id -- A32
;
full_id -- ifj16.print
(
chain -- 


)
;
full_id -- ifj16.print
(
id -- k
)
;
full_id -- Main.$d52
=
id -- k
;
full_id -- ifj16.print
(
chain -- 


)
;
full_id -- ifj16.print
(
full_id -- Main.$d52
)
;
String
id -- druhyRetezec
=
chain -- druhej retez
;
id -- retezec
=
id -- retezec
+
id -- druhyRetezec
;
id -- retezec
=
chain -- ahoj
+
chain -- svete
;
id -- retezec
=
chain -- ahoj
+
chain -- svete
+
chain -- !
;
id -- retezec
=
chain -- ahoj
+
id -- k
;
if
(
id -- k
<=
lit_int -- 0
)
{
full_id -- ifj16.print
(
chain -- k<0
)
;
}
else
if
(
id -- k
==
lit_int -- 0
)
{
full_id -- ifj16.print
(
chain -- k=0
)
;
}
else
if
(
id -- k
>=
lit_int -- 0
int
&&
id -- k
<
lit_int -- 25
)
{
full_id -- ifj16.print
(
chain -- k>0 && k<25
)
;
}
else
if
(
id -- k
>
lit_int -- 0
||
id -- k
<
lit_int -- 25
)
{
full_id -- ifj16.print
(
chain -- k>0 || k<25
)
;
}
else
if
(
id -- k
>
lit_int -- 0
)
{
full_id -- ifj16.print
(
chain -- k>0
)
;
}
else
{
full_id -- ifj16.print
(
chain -- nestane se
)
;
}
if
(
lit_int -- 5
!=
lit_int -- 2
)
{
full_id -- ifj16.print
(
chain -- 5 se nerovna 2
)
;
}
else
{
}
while
(
id -- k
>
lit_int -- 0
)
{
id -- k
=
id -- k
-
lit_int -- 1
;
}
while
(
lit_int -- 1
)
{
if
(
id -- k
>
lit_int -- 5
)
{
break
;
}
id -- k
=
id -- k
+
lit_int -- 1
;
}
while
(
true
)
{
if
(
id -- k
<
lit_int -- 0
)
{
break
;
}
id -- k
--
;
}
id -- k
=
id -- square
(
id -- k
)
;
id -- pisAhoj
(
)
;
int
id -- pocetAcek
=
lit_int -- 20
;
id -- pisAcka
(
id -- pocetAcek
)
;
int
id -- fact
=
full_id -- SampleClass.factorial
(
lit_int -- 5
)
;
int
id -- a
=
lit_int -- 5
,
id -- b
=
lit_int -- 6
,
id -- c
=
lit_int -- 7
;
if
(
id -- a
==
id -- b
)
{
id -- a
=
id -- b
;
}
else
if
(
id -- a
!=
id -- b
)
{
id -- b
=
id -- a
;
}
else
if
(
id -- a
<
id -- c
)
{
id -- c
=
id -- a
;
}
else
if
(
id -- a
>
id -- c
)
{
id -- a
=
id -- a
-
lit_int -- 1
;
}
else
if
(
id -- a
<=
id -- c
)
{
id -- c
=
lit_int -- 7
;
}
else
if
(
id -- a
>=
id -- b
)
{
id -- a
=
id -- b
;
}
else
{
id -- c
=
id -- a
;
}
int
id -- intProm
=
id -- readInt
(
)
;
double
id -- doubleProm
=
id -- readDouble
(
)
;
String
id -- stringProm
=
id -- readString
(
)
;
id -- print
(
id -- intProm
)
;
id -- print
(
id -- doubleProm
)
;
id -- print
(
id -- stringProm
)
;
id -- print
(
id -- intProm
+
id -- doubleProm
+
id -- stringProm
)
;
int
id -- delkaRetezce
=
id -- length
(
chain -- Ahoj
)
;
id -- print
(
id -- delkaRetezce
)
;
int
id -- delkaRetezce
=
id -- length
(
chain -- x
	\z
)
;
id -- print
(
id -- delkaRetezce
)
;
String
id -- subString
=
id -- substr
(
chain -- Ahoj svete!
,
lit_int -- 2
,
lit_int -- 8
)
;
id -- print
(
id -- subString
)
;
int
id -- comp
=
id -- compare
(
chain -- Ahoj
,
chain -- Ahoj
)
;
id -- print
(
id -- comp
)
;
id -- comp
=
id -- compare
(
chain -- Ahoy
,
chain -- Ahoj
)
;
id -- print
(
id -- comp
)
;
int
id -- fInt
=
id -- find
(
chain -- s
,
chain -- askos
)
;
id -- print
(
id -- fInt
)
;
id -- fInt
=
id -- find
(
chain -- s
,
chain -- aladin
)
;
String
id -- serazRetez
=
id -- sort
(
chain -- zskajdbcyw
)
;
id -- print
(
id -- serazRetez
)
;
id -- delkaRetezce
=
id -- length
(
chain -- Ahoj
,
lit_int -- 1
)
;
id -- subString
=
id -- substr
(
chain -- asd
,
lit_int -- 2
)
;
}
static
void
id -- pisAhoj
(
)
{
full_id -- ifj16.print
(
chain -- Ahoj
)
;
return
;
full_id -- ifj16.print
(
chain -- Toto se neprovede
)
;
}
static
double
id -- square
(
double
id -- a
)
{
return
id -- k
*
id -- k
;
}
static
String
id -- vracimString
(
)
{
return
chain -- ahoj
;
}
static
void
id -- pisAhoj
(
)
{
full_id -- ifj16.print
(
chain -- Ahoj
)
;
}
static
void
id -- pocetAcek
(
int
id -- i
)
{
while
(
id -- i
)
{
full_id -- ifj16.print
(
chain -- A
)
;
id -- i
=
id -- i
-
lit_int -- 1
;
}
}
}
class
id -- SampleClass
{
static
void
id -- run
(
)
{
int
id -- a
;
int
id -- vysl
;
int
id -- neg
;
full_id -- ifj16.print
(
chain -- Zadejte cislo pro vypocet faktorialu: 
)
;
id -- a
=
full_id -- ifj16.readInt
(
)
;
if
(
id -- a
<
lit_int -- 0
)
{
full_id -- ifj16.print
(
chain -- Faktorial nelze spocitat!

)
;
}
else
{
id -- vysl
=
id -- factorial
(
id -- a
)
;
id -- neg
=
lit_int -- 0
-
id -- vysl
;
full_id -- ifj16.print
(
chain -- Vysledek:
+
id -- vysl
)
;
full_id -- ifj16.print
(
chain -- (zaporny:
+
id -- neg
+
chain -- )

)
;
}
}
static
int
id -- factorial
(
int
id -- n
)
{
int
id -- temp_result
;
int
id -- decremented_n
=
id -- n
-
lit_int -- 1
;
if
(
id -- n
<
lit_int -- 2
)
{
return
lit_int -- 1
;
}
else
{
id -- temp_result
=
id -- factorial
(
id -- decremented_n
)
;
id -- temp_result
=
id -- n
*
id -- temp_result
;
return
id -- temp_result
;
}
}
}
_EoF